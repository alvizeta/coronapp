{"version":3,"sources":["components/Cards.jsx","api/index.js","components/CountryPicker.jsx","components/Chart.jsx","App.js","index.js","images/image.png"],"names":["Container","styled","div","InfectedGrid","Grid","RecoveredGrid","DeathsGrid","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","container","spacing","justify","item","xs","md","component","Card","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","StyledFormControl","FormControl","CountryPicker","handleCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fetchApi","NativeSelect","defaultValue","onChange","e","target","i","key","Chart","setDailyData","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","StyledImage","img","App","state","fetchedData","setState","this","alt","src","coronaImage","React","Component","ReactDom","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.43056744.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport CountUp from \"react-countup\";\n\nconst Container = styled.div`\n    margin: 50px 0px;\n`;\n\nconst InfectedGrid = styled(Grid)`\n    border-bottom: 10px solid rgba(0,0,255,0.5);\n    margin: 2% !important;\n    @media(max-width: 770px) {\n        margin: 2% 0 !important;\n    }\n`;\n\nconst RecoveredGrid = styled(Grid)`\n    border-bottom: 10px solid rgba(0,255,0,0.5);\n    margin: 2% !important;\n    @media(max-width: 770px) {\n        margin: 2% 0 !important;\n    }\n`;\n\nconst DeathsGrid = styled(Grid)`\n    border-bottom: 10px solid rgba(255,0,0,0.5);\n    margin: 2% !important;\n    @media(max-width: 770px) {\n        margin: 2% 0 !important;\n    }\n`;\n\nconst Cards = ({ data: {confirmed, recovered, deaths, lastUpdate} }) => {\n\n    console.log(confirmed);\n\n    if(!confirmed){\n        return 'Loading';\n    }\n    return (\n        <Container>\n            <Grid container spacing={3} justify=\"center\">\n                <InfectedGrid item xs={12} md={3} component={Card}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\"> Number of active cases of COVID-19 </Typography>\n                    </CardContent>\n                </InfectedGrid>\n                <RecoveredGrid xs={12} md={3} item component={Card}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\"> Number of recoveries from COVID-19 </Typography>\n                    </CardContent>\n                </RecoveredGrid>\n                <DeathsGrid xs={12} md={3} item component={Card}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom> Deaths </Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\"> Number of deaths from COVID-19 </Typography>\n                    </CardContent>\n                </DeathsGrid>\n            </Grid>\n        </Container>\n    )\n}\n\nexport default Cards;","import axios from \"axios\";\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n\n    let changeableUrl = url;\n\n    if(country) {\n        changeableUrl = `${url}/countries/${country}`\n    }\n\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\n\n        return {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate,\n        };\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`)\n\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.deaths,\n            date: dailyData.reportDate,\n        }))\n        return modifiedData;\n    } catch (e) {\n        console.log(e);\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: { countries }} = await axios.get(`${url}/countries/`)\n\n        return countries.map((country) => country.name);\n    } catch (e) {\n        console.log(e);\n    }\n}","import React, { useEffect, useState } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport { fetchCountries } from \"../api\";\n\nconst StyledFormControl = styled(FormControl)`\n    width: 30%;\n    margin-bottom: 30px !important;\n`;\n\nconst CountryPicker = ({ handleCountryChange }) => {\n\n    const [ fetchedCountries, setFetchedCountries ] = useState([]);\n\n    useEffect(() => {\n        const fetchApi = async () => {\n            setFetchedCountries(await fetchCountries())\n        }\n\n        fetchApi();\n    }, [setFetchedCountries])\n\n    return (\n        <StyledFormControl>\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n                <option value=\"\">Global</option>\n                { fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </StyledFormControl>\n    )\n}\n\nexport default CountryPicker;","import React, { useState, useEffect} from \"react\";\nimport { fetchDailyData } from \"../api\";\nimport { Line, Bar } from \"react-chartjs-2\"\n\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: center;\n    width: 55% !important;\n    \n    @media(max-width: 770px) {\n        width: 100% !important;\n    }\n`;\n\nconst Chart = ({ data: { confirmed, recovered, deaths}, country}) => {\n    const [ dailyData, setDailyData ] = useState([]);\n\n    useEffect(() => {\n        const fetchApi = async () => {\n            setDailyData(await fetchDailyData());\n        }\n\n        fetchApi();\n    }, [])\n\n    const lineChart = (\n        dailyData.length ? (\n            <Line data={{ labels: dailyData.map(({ date }) => date), datasets:[{\n                    data: dailyData.map(({ confirmed}) => confirmed),\n                    label: 'Infected',\n                    borderColor: '#3333ff',\n                    fill: true\n                },{\n                    data: dailyData.map(({ deaths}) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                    fill: true\n                }]}} />\n        ) : null\n    );\n\n    const barChart = (\n        confirmed ? (\n            <Bar data={{\n                labels: ['infected', 'recovered', 'deaths'],\n                datasets: [{\n                    label: 'People',\n                    backgroundColor: [\n                        'rgba(0,0,255,0.5)',\n                        'rgba(0,255,0,0.5)',\n                        'rgba(255,0,0,0.5)',\n                    ],\n                    data: [ confirmed.value, recovered.value, deaths.value]\n                }]\n            }}\n            options={{\n                legend: { display: false },\n                title: { display: true, text: `Current state in ${country}`}\n            }}/>\n        ) : null\n    )\n\n    return (\n        <Container>\n            {country ? barChart : lineChart }\n        </Container>\n    )\n}\n\nexport default Chart;","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Cards, Chart, CountryPicker } from \"./components\"\nimport { fetchData } from \"./api\";\nimport coronaImage from './images/image.png'\n\n\nconst Container = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    \n     @media(max-width: 770px) {\n        margin: 0 10%;\n    }\n`;\n\nconst StyledImage = styled.img`\n    width: 370px;\n    margin: 10px 0px;\n    @media(max-width: 770px) {\n        width: 100%;\n    }\n`;\n\nclass App extends React.Component {\n\n    state = {\n        data: {},\n        country: '',\n    }\n\n    handleCountryChange = async (country) => {\n        const fetchedData = await fetchData(country);\n        this.setState({ data: fetchedData, country: country})\n    }\n\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n        this.setState({ data: fetchedData})\n    }\n\n    render() {\n        const { data, country } = this.state;\n\n        return (\n            <Container>\n                <StyledImage alt=\"COVID-19\" src={coronaImage}></StyledImage>\n                <Cards data={data}/>\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\n                <Chart data={data} country={country}/>\n            </Container>\n        )\n    }\n}\nexport default App;","import React from 'react';\nimport ReactDom from 'react-dom';\n\nimport App from './App';\n\nReactDom.render(<App />, document.getElementById('root'));","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}